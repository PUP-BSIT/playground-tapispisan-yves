(()=>{"use strict";var e,n;!function(e){e.KILOMETER="km",e.MILE="m"}(e||(e={})),function(e){e.NORTH="N",e.EAST="E",e.WEST="W",e.SOUTH="S"}(n||(n={}));const t={plate_no:"ABC 1234",owner_name:"John Doe",speed:50,printSpeed(){console.log(`The current speed of ${this.plate_no} is ${this.speed} ${e.MILE}`)},direction(){console.log(`Going to ${n.SOUTH}${n.WEST}`)}},o={full_name:"Jane Dee",birthday:new Date("2002-03-25"),speed:6.5,printSpeed(){console.log(`The current speed of ${this.full_name} is ${this.speed} ${e.KILOMETER}`)},direction(){console.log(`Going to ${n.NORTH}${n.EAST}`)}};function i(e){console.log("Speed Test On Going..."),e.printSpeed()}function c(e){e.direction()}function r(e,n){console.log("Logging..."),console.log(e),console.log(n)}i(o),c(o),i(t),c(t),console.log({name:"John Doe",age:25});let a=(()=>{let e,n,t=[r],o=[];return n=class{constructor(e){this.name=e,console.log(`${this.name}" is created.`)}},i=n,"symbol"==typeof(c="Name")&&(c=c.description?"[".concat(c.description,"]"):""),Object.defineProperty(i,"name",{configurable:!0,value:a?"".concat(a," ",c):c}),(()=>{const i="function"==typeof Symbol&&Symbol.metadata?Object.create(null):void 0;(function(e,n,t,o,i,c){function r(e){if(void 0!==e&&"function"!=typeof e)throw new TypeError("Function expected");return e}for(var a,l=o.kind,s="getter"===l?"get":"setter"===l?"set":"value",u=!n&&e?o.static?e:e.prototype:null,d=n||(u?Object.getOwnPropertyDescriptor(u,o.name):{}),f=!1,p=t.length-1;p>=0;p--){var g={};for(var m in o)g[m]="access"===m?{}:o[m];for(var m in o.access)g.access[m]=o.access[m];g.addInitializer=function(e){if(f)throw new TypeError("Cannot add initializers after decoration has completed");c.push(r(e||null))};var h=(0,t[p])("accessor"===l?{get:d.get,set:d.set}:d[s],g);if("accessor"===l){if(void 0===h)continue;if(null===h||"object"!=typeof h)throw new TypeError("Object expected");(a=r(h.get))&&(d.get=a),(a=r(h.set))&&(d.set=a),(a=r(h.init))&&i.unshift(a)}else(a=r(h))&&("field"===l?i.unshift(a):d[s]=a)}u&&Object.defineProperty(u,o.name,d),f=!0})(null,e={value:n},t,{kind:"class",name:n.name,metadata:i},null,o),n=e.value,i&&Object.defineProperty(n,Symbol.metadata,{enumerable:!0,configurable:!0,writable:!0,value:i}),function(e,n,t){for(var o=arguments.length>2,i=0;i<n.length;i++)t=o?n[i].call(e,t):n[i].call(e)}(n,o)})(),n;var i,c,a})();new a("John Doe"),new a("Jane Dee")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiJ1QkFDS0EsRUFLQUMsR0FMTCxTQUFLRCxHQUNELGlCQUNBLFVBQ0gsQ0FIRCxDQUFLQSxJQUFBQSxFQUFZLEtBS2pCLFNBQUtDLEdBQ0QsWUFDQSxXQUNBLFdBQ0EsV0FDSCxDQUxELENBQUtBLElBQUFBLEVBQVMsS0FpQmQsTUFBTUMsRUFBaUIsQ0FDbkJDLFNBQVUsV0FDVkMsV0FBWSxXQUNaQyxNQUFPLEdBQ1AsVUFBQUMsR0FDSUMsUUFBUUMsSUFBSSx3QkFBd0JDLEtBQUtOLGVBQWVNLEtBQUtKLFNBQVNMLEVBQWFVLE9BQ3ZGLEVBQ0EsU0FBQUMsR0FDSUosUUFBUUMsSUFBSSxZQUFZUCxFQUFVVyxRQUFRWCxFQUFVWSxPQUN4RCxHQWFFQyxFQUFrQixDQUNwQkMsVUFBVyxXQUNYQyxTQUFVLElBQUlDLEtBQUssY0FDbkJaLE1BQU8sSUFDUCxVQUFBQyxHQUNJQyxRQUFRQyxJQUFJLHdCQUF3QkMsS0FBS00sZ0JBQWdCTixLQUFLSixTQUFTTCxFQUFha0IsWUFDeEYsRUFDQSxTQUFBUCxHQUNJSixRQUFRQyxJQUFJLFlBQVlQLEVBQVVrQixRQUFRbEIsRUFBVW1CLE9BQ3hELEdBT0osU0FBU0MsRUFBVUMsR0FFZmYsUUFBUUMsSUFBSSwwQkFDWmMsRUFBV2hCLFlBQ2YsQ0FFQSxTQUFTaUIsRUFBZUQsR0FDcEJBLEVBQVdYLFdBQ2YsQ0FhQSxTQUFTYSxFQUFPQyxFQUF1QkMsR0FDbkNuQixRQUFRQyxJQUFJLGNBQ1pELFFBQVFDLElBQUlpQixHQUNabEIsUUFBUUMsSUFBSWtCLEVBQ2hCLENBZEFMLEVBQVVQLEdBQ1ZTLEVBQWVULEdBQ2ZPLEVBQVVuQixHQUNWcUIsRUFBZXJCLEdBS2ZLLFFBQVFDLElDaEZlLENBQ25CbUIsS0FBTSxXQUNOQyxJQUFLLEssSUR1RkhDLEVBQUksTSxXQURUTCxHLG9CQUVHLFdBQUFDLENBQW9CRSxHQUFBLEtBQUFBLEtBQUFBLEVBQ2xCcEIsUUFBUUMsSUFBSSxHQUFHQyxLQUFLa0Isb0JBQ3RCLEcsa21DQUhKLGtFLDBNQUFNLEssa0JBQUksR0FNSSxJQUFJRSxFQUFLLFlBQ1QsSUFBSUEsRUFBSyxXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXlfcHJvamVjdC8uL3NyYy9hcHAudHMiLCJ3ZWJwYWNrOi8vbXlfcHJvamVjdC8uL3NyYy9wZXJzb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy84XHJcbmVudW0gRGlzdGFuY2VVbml0IHtcclxuICAgIEtJTE9NRVRFUiA9IFwia21cIixcclxuICAgIE1JTEUgPSBcIm1cIlxyXG59XHJcblxyXG5lbnVtIERpcmVjdGlvbiB7XHJcbiAgICBOT1JUSCA9IFwiTlwiLFxyXG4gICAgRUFTVCA9IFwiRVwiLFxyXG4gICAgV0VTVCA9IFwiV1wiLFxyXG4gICAgU09VVEggPSBcIlNcIlxyXG59XHJcblxyXG4vLzFcclxudHlwZSBWZWhpY2xlID0ge1xyXG4gICAgcGxhdGVfbm86IHN0cmluZztcclxuICAgIG93bmVyX25hbWU6IHN0cmluZztcclxuICAgIHNwZWVkOiBudW1iZXI7IFxyXG4gICAgcHJpbnRTcGVlZCgpOiB2b2lkO1xyXG4gICAgZGlyZWN0aW9uKCk6IHZvaWQ7XHJcbn07XHJcblxyXG4vLzNcclxuY29uc3QgbXlDYXI6IFZlaGljbGUgPSB7XHJcbiAgICBwbGF0ZV9ubzogXCJBQkMgMTIzNFwiLFxyXG4gICAgb3duZXJfbmFtZTogXCJKb2huIERvZVwiLFxyXG4gICAgc3BlZWQ6IDUwLFxyXG4gICAgcHJpbnRTcGVlZCgpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhgVGhlIGN1cnJlbnQgc3BlZWQgb2YgJHt0aGlzLnBsYXRlX25vfSBpcyAke3RoaXMuc3BlZWR9ICR7RGlzdGFuY2VVbml0Lk1JTEV9YCk7XHJcbiAgICB9LFxyXG4gICAgZGlyZWN0aW9uKCl7XHJcbiAgICAgICAgY29uc29sZS5sb2coYEdvaW5nIHRvICR7RGlyZWN0aW9uLlNPVVRIfSR7RGlyZWN0aW9uLldFU1R9YClcclxuICAgIH1cclxufTtcclxuXHJcbi8vMlxyXG50eXBlIFBlcnNvbiA9IHtcclxuICAgIGZ1bGxfbmFtZTogc3RyaW5nO1xyXG4gICAgYmlydGhkYXk6IERhdGU7XHJcbiAgICBzcGVlZDogbnVtYmVyOyBcclxuICAgIHByaW50U3BlZWQoKTogdm9pZDtcclxuICAgIGRpcmVjdGlvbigpOiB2b2lkO1xyXG59O1xyXG5cclxuLy80XHJcbmNvbnN0IGphbmVEZWU6IFBlcnNvbiA9IHtcclxuICAgIGZ1bGxfbmFtZTogXCJKYW5lIERlZVwiLFxyXG4gICAgYmlydGhkYXk6IG5ldyBEYXRlKFwiMjAwMi0wMy0yNVwiKSxcclxuICAgIHNwZWVkOiA2LjUsXHJcbiAgICBwcmludFNwZWVkKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBUaGUgY3VycmVudCBzcGVlZCBvZiAke3RoaXMuZnVsbF9uYW1lfSBpcyAke3RoaXMuc3BlZWR9ICR7RGlzdGFuY2VVbml0LktJTE9NRVRFUn1gKVxyXG4gICAgfSxcclxuICAgIGRpcmVjdGlvbigpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBHb2luZyB0byAke0RpcmVjdGlvbi5OT1JUSH0ke0RpcmVjdGlvbi5FQVNUfWApXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vLzlcclxudHlwZSBDb250ZXN0YW50ID0gUGVyc29uIHwgVmVoaWNsZTtcclxuLy81XHJcbmZ1bmN0aW9uIHNwZWVkVGVzdChjb250ZXN0YW50OiBDb250ZXN0YW50KTogdm9pZCB7XHJcbiAgICAvLzZcclxuICAgIGNvbnNvbGUubG9nKFwiU3BlZWQgVGVzdCBPbiBHb2luZy4uLlwiKTtcclxuICAgIGNvbnRlc3RhbnQucHJpbnRTcGVlZCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkaXJlY3Rpb25Hb2luZyhjb250ZXN0YW50OiBDb250ZXN0YW50KTogdm9pZHtcclxuICAgIGNvbnRlc3RhbnQuZGlyZWN0aW9uKCk7XHJcbn1cclxuXHJcbi8vN1xyXG5zcGVlZFRlc3QoamFuZURlZSk7XHJcbmRpcmVjdGlvbkdvaW5nKGphbmVEZWUpO1xyXG5zcGVlZFRlc3QobXlDYXIpO1xyXG5kaXJlY3Rpb25Hb2luZyhteUNhcik7XHJcblxyXG4vL2ltcG9ydFxyXG5pbXBvcnQgeyBwZXJzb24xIH0gZnJvbSBcIi4vcGVyc29uXCI7XHJcblxyXG5jb25zb2xlLmxvZyhwZXJzb24xKTtcclxuXHJcbmZ1bmN0aW9uIExvZ2dlcihjb25zdHJ1Y3RvcjogRnVuY3Rpb24sIG1ldGFkYXRhOiBvYmplY3QpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiTG9nZ2luZy4uLlwiKTtcclxuICAgIGNvbnNvbGUubG9nKGNvbnN0cnVjdG9yKTtcclxuICAgIGNvbnNvbGUubG9nKG1ldGFkYXRhKTtcclxufVxyXG4gIFxyXG5ATG9nZ2VyXHJcbmNsYXNzIE5hbWUge1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBuYW1lOiBzdHJpbmcpIHtcclxuICAgICAgY29uc29sZS5sb2coYCR7dGhpcy5uYW1lfVwiIGlzIGNyZWF0ZWQuYCk7XHJcbiAgICB9XHJcbn1cclxuICAgXHJcbmNvbnN0IG5hbWUxID0gbmV3IE5hbWUoXCJKb2huIERvZVwiKTtcclxuY29uc3QgbmFtZTIgPSBuZXcgTmFtZShcIkphbmUgRGVlXCIpOyIsImV4cG9ydCBjb25zdCBwZXJzb24xID0ge1xyXG4gICAgbmFtZTogXCJKb2huIERvZVwiLFxyXG4gICAgYWdlOiAyNSxcclxuICB9O1xyXG4gICJdLCJuYW1lcyI6WyJEaXN0YW5jZVVuaXQiLCJEaXJlY3Rpb24iLCJteUNhciIsInBsYXRlX25vIiwib3duZXJfbmFtZSIsInNwZWVkIiwicHJpbnRTcGVlZCIsImNvbnNvbGUiLCJsb2ciLCJ0aGlzIiwiTUlMRSIsImRpcmVjdGlvbiIsIlNPVVRIIiwiV0VTVCIsImphbmVEZWUiLCJmdWxsX25hbWUiLCJiaXJ0aGRheSIsIkRhdGUiLCJLSUxPTUVURVIiLCJOT1JUSCIsIkVBU1QiLCJzcGVlZFRlc3QiLCJjb250ZXN0YW50IiwiZGlyZWN0aW9uR29pbmciLCJMb2dnZXIiLCJjb25zdHJ1Y3RvciIsIm1ldGFkYXRhIiwibmFtZSIsImFnZSIsIk5hbWUiXSwic291cmNlUm9vdCI6IiJ9